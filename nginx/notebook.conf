#user  nobody;
worker_processes  1;
error_log  /Users/youxuehu/PycharmProjects/JupyterNotebook-Base/nginx/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        /Users/youxuehu/PycharmProjects/JupyterNotebook-Base/nginx/nginx.pid;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /Users/youxuehu/PycharmProjects/JupyterNotebook-Base/nginx/access.log  main;
    sendfile        on;
    #tcp_nopush     on;
    #keepalive_timeout  0;
    keepalive_timeout  65;
    #gzip  on;
    charset utf-8;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    upstream youxuehu {
        server 127.0.0.1:8080;
        keepalive 5;
    }
    server {
        listen       80;
        server_name  localhost;
        charset utf-8;
        #charset koi8-r;
        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }
        location ~ /lua/(.*) {
            default_type "text/html";
            content_by_lua '
                ngx.say("hello lua...");
            ';
        }
        location ~ /proxy/(?<namespace>(\w+):(\d+))/(?<rest>.*) {
            set $myvar "";
            if ($request_uri ~* "/proxy/(.*)") {
                access_by_lua_file /usr/local/etc/openresty/access.lua;
                proxy_pass http://$myvar;
            }
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            body_filter_by_lua_file /usr/local/etc/openresty/body_filter.lua;
        }

        location ~ /printJSON {
             default_type "application/json";
             access_by_lua_block {
                 local json = (loadfile "JSON.lua")()
                 local map = {
                    name="jack"
                 }
                 local resp = json:encode(map)
                 ngx.say(resp)
             }
        }
        ###########################################################################
        ######### http://localhost/getPlugins ########
        ######### nginx get 请求接口 ########
        ###########################################################################
        location ~ /getPlugins {
            default_type "application/json";
            access_by_lua_block {
                ngx.req.set_header("Content-Type", "application/json")
                local res = ngx.location.capture("/plugins/loader",
                {method = ngx.HTTP_GET})
                ngx.say(res.body)
            }
        }

        ###########################################################################
        ######### http://localhost/get/user/deploy.json?id=1&name=jack&data={"jjj":"jjjjj"} ########
        ######### nginx get 请求接口 ########
        ###########################################################################
        location ~ /get/user/deploy.json(?<rest>.*) {
            default_type "application/json";
            access_by_lua_block {
                local json = (loadfile "JSON.lua")()
                -- 获取 url ? 后面的参数
                local args, err = ngx.req.get_uri_args()
                local req_param = {}
                for key, val in pairs(args) do
                    req_param[key] = val
                end

                -- 获取 request body 里的参数
                ngx.req.read_body()
                local args, err = ngx.req.get_post_args()
                for key, val in pairs(args) do
                    req_param[key] = val
                end

                ngx.log(ngx.INFO, json:encode(req_param))
                ngx.log(ngx.ERR, json:encode(req_param))
                ngx.log(ngx.WARN, json:encode(req_param))
                ngx.req.set_header("Content-Type", "application/json")
                local res = ngx.location.capture("/user/post",
                {method = ngx.HTTP_POST, body=json:encode(req_param)})
                ngx.say(res.body)
            }
        }

        # location [ = | ~ | ~* | ^~ ] uri {
        # }
        # 1.  =:用于不含正则表达式的uri前，要求请求字符串与uri严格匹配，若成功则停止搜索并立即处理该请求
        # 2.  ~:用于表示uri的正则表达式，并且区分大小写
        # 3.  ~*:用于表示uri的正则表达式，并且不区分大小写
        # 4.  ^~:用于不含正则表达式的uri前, 找到匹配度最高的location后，立即处理请求，不再做uri中的正则匹配
        # 注意：若是uri中包含正则表达式，则必须有~或者~*标识
        # http://localhost/accessFile
        location = /accessFile {
            default_type "application/json";
            access_by_lua_file /usr/local/etc/openresty/json_call.lua;
        }

        location ~* (^.+\.(resource|json|tile|html|xls|pdf|zip)($|\;.?))|(^.*(/[^/\.]+)$) {
            proxy_pass http://youxuehu;
            proxy_set_header Host $host;
            proxy_set_header X-Forward-By $server_addr:$server_port;
            proxy_set_header X-Forward-For $remote_addr;
            proxy_set_header Connection "";
            proxy_http_version 1.1;
            proxy_connect_timeout 5s;
            proxy_read_timeout 30s;
            proxy_send_timeout 5s;
            proxy_buffer_size 16k;
            proxy_buffers 8 64k;
            proxy_busy_buffers_size 128k;
        }


        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
        # http://localhost/baidu
        # # 重定向
        location = /baidu {
            access_by_lua_block {
                ngx.redirect("http://www.baidu.com")
            }
        }
        # http://localhost/google
        # ngx.redirect("http://www.google.com")
        # 重定向
        location = /google {
            access_by_lua_block {
                ngx.redirect("http://www.google.com")
            }
        }
        # http://localhost/print
        # --输出响应内容体；(内容体结束后没有换行符；)
        # ngx.print("aaaaaaaaaaaaaa")
        # --输出响应内容体；(内容体结束后，输出一个换行符；)
        # ngx.say("aaaaaaaaaaaaaaa")
        # default_type "text/html";
        # default_type "text/plain";
        location = /print {
            default_type "text/plain";
            access_by_lua_block {
                ngx.print("http://www.google.com")
                ngx.say("aaaaaaaaaaaaaaa")
                ngx.say("bbbbbbbbbbbbbbb")
                ngx.say("ccccccccccccccc")
                ngx.say(ngx.md5("md5_bin"))
                ngx.say(ngx.md5("sha1_bin"))
                -- 2022-12-31
                ngx.say(ngx.today())
                -- 1672481476
                ngx.say(ngx.time())
                -- 1672481476.053
                ngx.say(ngx.now())
                -- 2022-12-31 18:11:16
                ngx.say(ngx.localtime())

                ngx.say(ngx.utctime())

                ngx.say(ngx.cookie_time(1290079655))
                ngx.say(ngx.http_time(1290079655))
                local time = ngx.parse_http_time("Thu, 18 Nov 2010 11:27:35 GMT")
                ngx.say(time)

            }
        }
    }
}