#user  nobody;
worker_processes  1;
error_log  /Users/youxuehu/PycharmProjects/JupyterNotebook-Base/nginx/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        /Users/youxuehu/PycharmProjects/JupyterNotebook-Base/nginx/nginx.pid;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /Users/youxuehu/PycharmProjects/JupyterNotebook-Base/nginx/access.log  main;
    sendfile        on;
    #tcp_nopush     on;
    #keepalive_timeout  0;
    keepalive_timeout  65;
    #gzip  on;
    charset utf-8;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
    server {
        listen       80;
        server_name  localhost;
        charset utf-8;
        #charset koi8-r;
        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }
        location ~ /lua/(.*) {
            default_type "text/html";
            content_by_lua '
                ngx.say("hello lua...");
            ';
        }
        location ~ /proxy/(?<namespace>(\w+):(\d+))/(?<rest>.*) {
            set $myvar "";
            if ($request_uri ~* "/proxy/(.*)") {
                access_by_lua_file /usr/local/etc/openresty/access.lua;
                proxy_pass http://$myvar;
            }
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            body_filter_by_lua_file /usr/local/etc/openresty/body_filter.lua;
        }


        location ~ /test {
             access_by_lua_block {
                 local res = ngx.location.capture("/auth")

                 if res.status == ngx.HTTP_OK then
                     return
                 end

                 if res.status == ngx.HTTP_FORBIDDEN then
                     ngx.exit(res.status)
                 end

                 ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
             }

             # proxy_pass/fastcgi_pass/postgres_pass/...
        }

        location ~* (^.+\.(resource|json|tile|html|xls|pdf|zip)($|\;.?))|(^.*(/[^/\.]+)$) {
            proxy_pass http://youxuehu;
            proxy_set_header Host $host;
            proxy_set_header X-Forward-By $server_addr:$server_port;
            proxy_set_header X-Forward-For $remote_addr;
            proxy_set_header Connection "";
            proxy_http_version 1.1;
            proxy_connect_timeout 5s;
            proxy_read_timeout 30s;
            proxy_send_timeout 5s;
            proxy_buffer_size 16k;
            proxy_buffers 8 64k;
            proxy_busy_buffers_size 128k;
        }

        upstream youxuehu {
            server 127.0.0.1:9999;
            keepalive 5;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}